[gcode_macro LINE_PURGE]
variable_default_z_height: 0.32             # Height above the bed to purge
variable_default_purge_amount: 45           # Amount of filament in millimeters to purge
variable_default_flow_rate: 4               # Desired flow rate in mm3/s
variable_default_print_margin: 20           # Distance in millimeters away from the print area purging
variable_default_bed_padding: 3             # Distance in millimeters away from the bed edge to purge

gcode:

  ; Save the current gcode state
  SAVE_GCODE_STATE NAME=purge_line_state

  {% set z_height = params.Z_HEIGHT | default(default_z_height) | float %}
  {% set purge_amount = params.PURGE_AMOUNT | default(default_purge_amount) | float %}
  {% set flow_rate = params.FLOW_RATE | default(default_flow_rate) | float %}
  {% set print_margin = params.PRINT_MARGIN | default(default_print_margin) | float %}
  {% set bed_padding = params.BED_PADDING | default(default_bed_padding) | float %}

  ; Assign some default bounds for the print area that will force a purge line along the left edge of the bed
  {% set x_min = (params.X_MIN | default(0) | float ) %}
  {% set x_max = (params.X_MAX | default(1) | float ) %}
  {% set y_min = (params.Y_MIN | default(bed_padding) | float ) %}
  {% set y_max = (params.Y_MAX | default(printer.toolhead.axis_maximum.y - 2 * bed_padding) | float ) %}

  ; Calculate bounds of the print area if available via exclude_objects metadata
  {% set all_points = printer.exclude_object.objects | selectattr('polygon', 'defined') | map(attribute='polygon') | sum(start=[]) %}
  {% set x_min = (all_points | map(attribute=0) | min | default(x_min) ) %}
  {% set x_max = (all_points | map(attribute=0) | max | default(x_max) ) %}
  {% set y_min = (all_points | map(attribute=1) | min | default(y_min) ) %}
  {% set y_max = (all_points | map(attribute=1) | max | default(y_max) ) %}

  ; Calculate the extrusion feed rate and travel speed
  {% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}
  {% set cross_section = nozzle_dia * z_height %}
  {% set extrusion_feed_rate = (flow_rate * 60) / cross_section %}
  {% set travel_speed = (printer.toolhead.max_velocity) * 60 %}

  ; Calculate the expected total purge line length
  {% set filament_dia = printer.configfile.config.extruder.filament_diameter | float %}
  {% set filament_vol = purge_amount * 3.14159 * filament_dia * filament_dia / 4 | float %}
  {% set total_length = filament_vol / cross_section %}
  {% set line_spacing = 3 * nozzle_dia %}

  ; Calculate the available space on each side of the print area
  {% set x_length = (x_max - x_min) | round(0, 'floor') %}
  {% set y_length = (y_max - y_min) | round(0, 'floor') %}
  {% set area_above = x_length * (printer.toolhead.axis_maximum.y - y_max - print_margin) %}
  {% set area_below = x_length * (y_min - print_margin) %}
  {% set area_left = y_length * (x_min - print_margin) %}
  {% set area_right = y_length * (printer.toolhead.axis_maximum.x - x_max - print_margin) %}
  {% set area = [area_above, area_below, area_left, area_right, 0] | max %}

  ; todo: if area is 0, or max_lines is 0, then we have no where to purge

  ; Check which side of the print area to perform a purge
  {% if area == area_left %}
    ; Purge to the left of the print area
    {% set line_axis = 'Y' %}
    {% set spacing_axis = 'X' %}
    {% set bounds = [x_min - print_margin, y_max, bed_padding, y_min] %}
    {% set available_space = x_length - print_margin | float %}
    {% set line_move = -y_length | round(2, 'floor') | float %}
    {% set spacing_move = -line_spacing | round(2, 'floor') | float %}
  {% elif area == area_above %}
    ; Purge above the print area
    {% set line_axis = 'X' %}
    {% set spacing_axis = 'Y' %}
    {% set bounds = [x_min, y_max + print_margin, x_max, printer.toolhead.axis_maximum.y - bed_padding] %}
    {% set line_move = x_length | round(2, 'floor') | float %}
    {% set spacing_move = line_spacing | round(2, 'floor') | float %}
  {% elif area == area_below %}
    ; Purge below the print area
    {% set line_axis = 'X' %}
    {% set spacing_axis = 'Y' %}
    {% set bounds = [x_min, y_min - print_margin, x_max, bed_padding] %}
    {% set available_space = y_length - print_margin | float %}
    {% set line_move = x_length | round(2, 'floor') | float %}
    {% set spacing_move = -line_spacing | round(2, 'floor') | float %}
  {% else %}
    ; Purge to the right of the print area
    {% set line_axis = 'Y' %}
    {% set spacing_axis = 'X' %}
    {% set bounds = [x_max + print_margin, y_max, printer.toolhead.axis_maximum.x - bed_padding, y_min] %}
    {% set line_move = -y_length | round(2, 'floor') | float %}
    {% set spacing_move = line_spacing | round(2, 'floor') | float %}
  {% endif %}

  ; Calculate the number of lines to extrude
  {% set num_lines = (total_length / line_move) | abs | round(0, 'ceil') | int %}

  ; Calculate the maximum number of lines that can fit in the available space
  {% if spacing_axis == 'X' %}
    {% set max_lines = (bounds[2] - bounds[0]) / line_spacing | round(0, 'floor') | int %}
  {% else %}
    {% set max_lines = (bounds[3] - bounds[1]) / line_spacing | round(0, 'floor') | int %}
  {% endif %}

  {% if num_lines > max_lines %}
    {% set num_lines = max_lines | int %}
  {% endif %}

  ; If we can fit any lines, then proceed
  {% if num_lines > 0 %}

    ; Set all axes to absolute
    G90

    ; Move to the starting position
    G0 X{bounds[0]} Y{bounds[1]} Z{z_height} F{travel_speed}

    ; Set all axes to relative
    G91 

    ; Extrude the lines in the calculated direction using a zig-zag pattern where each line is separated from the next by the line spacing
    {% set line_extrude_len = (purge_amount / num_lines) | round(2, 'ceil') | float %}
    {% set spacing_extrude_len = (line_extrude_len * spacing_move / line_move) | abs | round(2, 'ceil') | float %}

    {% for line in range(num_lines) %}
      ; Extrude the line, alternating the direction
      G1 {line_axis}{line_move if line % 2 == 0 else -line_move} E{line_extrude_len} F{extrusion_feed_rate}

      ; Move to the next line if we're going to print another one
      ; .. However, we'll skip moving for the second line since the first line is likely to have only partial extrusion 
      {% if 0 < line and line < num_lines - 1 %}
        G1 {spacing_axis}{spacing_move} E{spacing_extrude_len} F{extrusion_feed_rate}
      {% endif %}

    {% endfor %}
  {% endif %}

  ; Reset Extruder
  G92 E0
  ; Move Z Axis up little to prevent scratching of Heat Bed
  G1 Z2.0 F3000

  ; Restore the gcode state
  RESTORE_GCODE_STATE NAME=purge_line_state